Things you will need to build, flash & run these applications (only tested on linux):
- The Zephyr SDK (7+ GB), the Zephyr repo (3 GB) along with their metabuild
  tool ~west~. You can follow Zephyr's
  [[https://docs.zephyrproject.org/latest/develop/getting_started/index.html][Getting
  started guide]].
- The [[https://github.com/stlink-org/stlink][ST-Link driver]]
- OpenOCD or PyOCD for flashing
- An ARM compiler such as gcc-arm-none-eabi
- For TrustZone support: The
  [[https://www.st.com/en/development-tools/stm32cubeprog.html][STM32CubeProgrammer]]
  to set option bytes. ~STM32CubeProgrammer~ needs to be in the path and java
  needs to be installed.

For the trusted build:
- This application is using a custom tf-m secure partition containing services
  that can be called from the non-secure Zephyr side.
- This is a proof-of-work of a trusted peripheral.
- Right now, the secure side contains code to send a measuring request (MR) to our I2C device
  using STM32 HAL code. Most of the STM32 HAL is included inside tf-m, except
  some of the i2c code - that needs to be included by hand (TODO how to).
- The Zephyr side sends a data fetch (DF) command to the device using zephyr's
  i2c api to get the temperature and prints it.
- We are forcing the test flash memory layout memory from tf-m to get more
  flash memory for our ns app (from 32kb to 172kb). By default - even with just
  enabling CONFIG_SHELL=y and nothing else- we get an error of the sort:
  ~region `FLASH' overflowed by 12324 bytes~.

Scripts:
- ~build_untrusted.sh~ : builds the untrusted setup in build_untrusted
- ~flash_untrusted.sh~ : flashes the untrusted setup
- ~build_trusted.sh~   : builds the trusted setup in build
- ~flash_trusted.sh~   : flashes the trusted setup in build. NOTE: Make sure to
  run ~./build/tfm/regression.sh~ after building the trusted setup at least
  once before flashing. This enables TrustZone and sets option bytes.
